import json
import os
from django.conf import settings
import django_rq
import zipfile
import io
from pathlib import Path
from django.contrib import messages
from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponse, Http404
from django.contrib import auth
from urllib.parse import quote, unquote
from django.contrib.auth.forms import AuthenticationForm, PasswordChangeForm
from .forms import MyUserCreationForm, BoardModelForm, configureUserForm
from .models import User, BoardModel, SnippetModel
from .tasks import create_snippet
from django.contrib.auth.decorators import login_required


@login_required
def download(request, snippetPk):
    object = get_object_or_404(SnippetModel, pk=snippetPk)
    if object.Board.User != request.user:
        return Http404

    filename = object.videoFile.name.split('/')[-1]
    response = HttpResponse(object.videoFile, content_type='text/plain')
    response['Content-Disposition'] = 'attachment; filename=%s' % filename

    return response

@login_required
def download_query(request, query, boardPk=None):
    query = unquote(query).split(',')
    if boardPk:
        snippets = SnippetModel.objects.filter(Board=BoardModel.objects.get(pk=boardPk), Tags__contains=query)
    else:
        snippets = SnippetModel.objects.filter(Tags__contains=query)
    filenames = list()

    for i in snippets:
        filenames.append(i.videoFile.path)

    zip_subdir = ""

    for i in query:
        zip_subdir = zip_subdir + i + '_'

    zip_filename = "%s.zip" % zip_subdir

    # Open BytesIO to grab in-memory ZIP contents
    s = io.BytesIO()

    # The zip compressor
    zf = zipfile.ZipFile(s, "w")

    for fpath in filenames:
        # Calculate path for file in zip
        fdir, fname = os.path.split(fpath)
        zip_path = os.path.join(zip_subdir, fname)

        # Add file, at correct path
        zf.write(fpath, zip_path, compress_type=zipfile.ZIP_DEFLATED)

    # Must close zip for all contents to be written
    zf.close()

    # Grab ZIP file from in-memory, make response with correct MIME-type
    resp = HttpResponse(
        s.getvalue(), content_type="application/x-zip-compressed")
    # ..and correct content-disposition
    resp['Content-Disposition'] = 'attachment; filename=%s' % zip_filename

    return resp

@login_required
def download_board(request, boardPk):
    board = get_object_or_404(BoardModel, User=request.user, pk=boardPk)
    filenames = list()

    for i in board.snippets():
        filenames.append(i.videoFile.path)

    zip_subdir = board.Name
    zip_filename = "%s.zip" % zip_subdir

    # Open BytesIO to grab in-memory ZIP contents
    s = io.BytesIO()

    # The zip compressor
    zf = zipfile.ZipFile(s, "w")

    for fpath in filenames:
        # Calculate path for file in zip
        fdir, fname = os.path.split(fpath)
        zip_path = os.path.join(zip_subdir, fname)

        # Add file, at correct path
        zf.write(fpath, zip_path, compress_type=zipfile.ZIP_DEFLATED)

    # Must close zip for all contents to be written
    zf.close()

    # Grab ZIP file from in-memory, make response with correct MIME-type
    resp = HttpResponse(
        s.getvalue(), content_type="application/x-zip-compressed")
    # ..and correct content-disposition
    resp['Content-Disposition'] = 'attachment; filename=%s' % zip_filename

    return resp


def home(request):
    return render(request=request, template_name="main/home.html")


def login(request):
    error_message = None

    if request.method == 'POST':
        form = AuthenticationForm(request=request, data=request.POST)

        if form.is_valid():
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = auth.authenticate(username=username, password=password)
            if user is not None:
                auth.login(request, user)
                # messages.info(request, f"Hello, {username}")
                messages.add_message(
                    request, messages.INFO, 'Welcome back, {}!! :)'.format(user.username))

                return redirect("/dashboard")
        else:
            messages.error(request, 'Please correct the error below.')

            error_messages = form.error_messages

            if 'invalid_login' in error_messages.keys():
                error_message = 'Please enter a correct username and password. Note that both fields may be case-sensitive.'

    form = AuthenticationForm()

    return render(request=request, template_name="main/login.html", context={"error_message": error_message})


def signup(request):
    error_message = None

    if request.method == 'POST':

        form = MyUserCreationForm(request.POST)

        if form.is_valid():
            form.save()
            username = form.cleaned_data.get('username')
            raw_password = form.cleaned_data.get('password1')
            user = auth.authenticate(username=username, password=raw_password)
            auth.login(request, user)
            messages.add_message(
                request, messages.INFO, 'Welcome here!! :)')

            return redirect('/dashboard')

        else:
            messages.error(request, 'Please correct the error below.')

            username = request.POST['username']

            if User.objects.filter(username=username).exists():
                error_message = "Username already exists. Login instead?"
            else:
                error_message = "Password either does not match, or is too weak. Does your password contain at least 8 characters, and not entirely numeric."

    return render(request=request, template_name="main/signup.html", context={'error_message': error_message})


@login_required
def logout(request):
    messages.add_message(request, messages.WARNING, 'You have logged out :o')
    auth.logout(request)
    return redirect("/")


@login_required
def change_password(request):
    if request.method == 'POST':
        form = PasswordChangeForm(request.user, request.POST)
        if form.is_valid():
            user = form.save()
            update_session_auth_hash(request, user)  # Important!
            messages.success(
                request, 'Your password was successfully updated!')
            return redirect('configure')
        else:
            messages.error(request, 'Please correct the error below.')
            error_messages = form.error_messages
            error_message = ''

            for i in error_messages.values():
                error_message = error_message + str(i) + ' '

    else:
        form = PasswordChangeForm(request.user)
        error_message = None
    return render(request, 'main/change_password.html', {
        'form': form, 'error_message': error_message
    })


@login_required
def dashboard(request):
    if request.method == "POST":
        query = request.POST['query'].split(',')
        snippets = SnippetModel.objects.filter(Tags__contains=query)
        messages.add_message(request, messages.SUCCESS,
                             'Query successful!! :)')
        query_slug = str()
        for i in query:
            query_slug = query_slug + i + '%2C'
        try:
            query_slug = query_slug[:-3]
        except:
            pass

        return render(request=request, template_name="main/snippets.html", context={'username': request.user.username, 'snippets': snippets, 'query_slug': query_slug})

    board_list = request.user.boards()
    tag_autocomplete_data = request.user.allTags
    return render(request=request, template_name="main/dashboard.html", context={'username': request.user.username, 'board_list': board_list, 'tag_autocomplete_data': tag_autocomplete_data, 'board_count': board_list.count()})


@login_required
def board(request, boardPk):
    board = get_object_or_404(BoardModel, User=request.user, pk=boardPk)

    if request.method == "POST":
        query = request.POST['query'].split(',')
        snippets = SnippetModel.objects.filter(
            Board=board, Tags__contains=query)
        messages.add_message(request, messages.SUCCESS,
                             'Query successful!! :)')
        query_slug = str()
        for i in query:
            query_slug = query_slug + i + '%2C'
        try:
            query_slug = query_slug[:-3]
        except:
            pass

        return render(request=request, template_name="main/snippets.html", context={'username': request.user.username, 'boardPk': boardPk, 'snippets': snippets, 'query_slug': query_slug, 'boardPk': boardPk})

    return render(request=request, template_name="main/board.html", context={'board': board, 'snippets': board.snippets(), 'username': request.user.username})


@login_required
def board_config(request, boardPk=None):

    if request.method == "POST":
        if 'delete' in request.POST:
            instance = get_object_or_404(
                BoardModel, User=request.user, pk=boardPk)
            instance.delete()
            return redirect('dashboard')
        else:
            if boardPk:
                instance = get_object_or_404(
                    BoardModel, User=request.user, pk=boardPk)
                form = BoardModelForm(
                    request.POST, request.FILES, instance=instance)
            else:
                form = BoardModelForm(request.POST, request.FILES)
                boardPk = False

            if form.is_valid():
                new_instance = form.save(commit=False)
                new_instance.User = request.user
                new_instance.save()
                boardPk = new_instance.pk

                messages.add_message(
                    request, messages.INFO, 'Configuring your board (converting your file from mp4 to mpd for DASH streaming)...')

                return redirect('board', boardPk)

    else:
        if boardPk:
            instance = BoardModel.objects.get(pk=boardPk)
            form = BoardModelForm(instance=instance)
        else:
            form = BoardModelForm(initial={'thumbnail': 'default'})
            boardPk = False

    return render(request=request, template_name="main/configure.html", context={'username': request.user.username, 'context': 'Board', 'boardPk': boardPk, 'form': form})


@login_required
def generate_thumbnail(request, boardPk):
    get_object_or_404(BoardModel, User=request.user,
                      pk=boardPk).create_thumbnail()

    messages.add_message(request, messages.INFO,
                         "Generated thumbnail :)")

    return redirect('board', boardPk)


@login_required
def delete_snippet(request, boardPk, snippetPk):
    snippet = get_object_or_404(SnippetModel, pk=snippetPk)

    if snippet.Board.User != request.user:
        return Http404
    else:
        snippet.delete()

    return redirect('board', boardPk)


@login_required
def video(request, boardPk):
    user = request.user
    board = get_object_or_404(BoardModel, User=request.user, pk=boardPk)

    if request.method == "POST":
        print(unquote(request.POST['data']))
        print(json.loads(unquote(request.POST['data']))[0])
        #data = json.loads(unquote(unquote(request.POST['data'])))
        #for i in data:
         #   django_rq.enqueue(create_snippet, board, i)

        messages.add_message(request, messages.SUCCESS, "Encoding ur snippets at the backend!!")

        return redirect('board', boardPk)

    video_path = board.get_mpd_videofile_url()

    return render(request=request, template_name="main/video.html", context={'username': request.user.username, 'board': board, 'video_path': video_path, 'start_recording_key': user.start_recording_key, 'end_recording_key': user.end_recording_key, 'cancel_recording_key': user.cancel_recording_key})


@login_required
def snippet_video(request, boardPk, snippetPk):
    snippet = get_object_or_404(SnippetModel, pk=snippetPk)
    if snippet.Board.User != request.user:
        return Http404

    video_path = '/media/users/snippets/' + \
        Path(snippet.videoFile.name).stem + '.mp4'

    thumbnail_url = snippet.get_thumbnail_url()

    return render(request=request, template_name="main/snippet-video.html", context={'username': request.user.username, 'boardPk': boardPk, 'thumbnail_url': thumbnail_url, 'video_path': video_path})


@login_required
def configure(request):
    if request.method == "POST":
        form = configureUserForm(request.POST, instance=request.user)

        if form.is_valid():
            form.save()
            return redirect('dashboard')

    form = configureUserForm(instance=request.user)

    return render(request=request, template_name="main/settings.html", context={'username': request.user.username, 'form': form})
# Create your views here.
